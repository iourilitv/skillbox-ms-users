image: docker:latest
services:
  - docker:dind
variables:
  DOCKER_DRIVER: overlay
  MAVEN_IMAGE: maven:3-openjdk-11-slim:latest
  APP_IMAGE: users-app
  APP_TAG: $CI_COMMIT_TAG

stages:
  - build
  - smoketests
  - itests

# Packaging the project with JUnit tests running
maven-build:
  stage: build
  image: $MAVEN_IMAGE
  script:
    - mvn package -B
  artifacts:
    paths:
      - target/*.jar

# Checking the app's code by SonarQube
sonarqube-check:
  stage: build
  image: $MAVEN_IMAGE
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar `-Dsonar.qualitygate.wait=true `-Dsonar.host.url=$SONAR_HOST_URL `-Dsonar.login=$SONAR_LOGIN_TOKEN
  allow_failure: true
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml

# Smoke tests running
smoke-tests:
  stage: smoketests
  image: $MAVEN_IMAGE
  script:
    - mvn -Dtest=**/smoke/* test

# Starting integration tests that use docker testcontainers
maven-integration-tests:
  stage: itests
  image: $MAVEN_IMAGE
  script:
    - mvn verify -Pintegration-test

itests-sonarqube-check:
  stage: itests
  image: $MAVEN_IMAGE
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify -Pintegration-test sonar:sonar `-Dsonar.qualitygate.wait=true `-Dsonar.host.url=$SONAR_HOST_URL `-Dsonar.login=$SONAR_LOGIN_TOKEN
  allow_failure: true
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml